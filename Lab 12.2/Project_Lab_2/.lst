Microsoft (R) Macro Assembler Version 14.00.23026.0	    11/05/15 19:37:01
sumarrays.asm						     Page 1 - 1


				; Program Name:           lab12.2.asm

				; Program Description: 
				; Write an assembly language subroutine that receives the offsets of three arrays, 
				; all of equal size.It adds the second and third arrays to the values in the first 
				; array. When it returns, the first arrayhas all new values. Use the supplied test 
				; program in C++ that creates an array, passes it to the subroutine, and prints the 
				; contents of the first array.
				;
				; Author: Chad Dreier
				; Date: 11/5/2015

				; Sum Three Arrays								 (sumarrays.asm)

				COMMENT !
				Assembly language subroutine that receives the offsets of three arrays, 
				all of equal size. It adds the second and third arrays to the values in 
				the first array. When it returns, the first array has all new values. 
				!


				.586
				.model flat,C

				SumThreeArrays PROTO,
					array1:PTR DWORD, array2:PTR DWORD, 
					array3:PTR DWORD, arraySize:DWORD

 00000000			.code
				;-----------------------------------------------
 00000000			SumThreeArrays PROC USES eax ebx esi,
					array1:PTR DWORD, array2:PTR DWORD, 
					array3:PTR DWORD, arraySize:DWORD
				;-----------------------------------------------
					LOCAL sz:BYTE		; local sz for jump
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000006  50		   *	    push   eax
 00000007  53		   *	    push   ebx
 00000008  56		   *	    push   esi
 00000009  C6 45 FF 04			mov sz, 4					; size of each iteration jump
 0000000D  8B 4D 14			mov ecx, arraySize			; set ecx to size of arrays for loop
					
 00000010			L1:
 00000010  8B 45 14			mov eax, arraySize			; move array size into eax
 00000013  2B C1			sub eax, ecx				; subtract whats left
 00000015  F6 65 FF			mul sz						; multiply by 4 to know how much to jump
					
 00000018  8B 75 08			mov esi, array1				; set esi to start of array 1
 0000001B  8B 1C 30			mov ebx, [esi+eax]			; move value of esi+jump into ebx
					
 0000001E  8B 75 0C			mov esi, array2				; set esi to start of array 2
 00000021  03 1C 30			add ebx, [esi+eax]			; add value of esi+jump to ebx

 00000024  8B 75 10			mov esi, array3				; set esi to start of array 3
 00000027  03 1C 30			add ebx, [esi+eax]			; add value of esi+jump to ebx

 0000002A  8B 75 08			mov esi, array1				; set esi to start of array 1
 0000002D  89 1C 30			mov [esi+eax], ebx			; move value of ebx into esi+jump

 00000030  E2 DE			LOOP L1

					ret  
 00000032  5E		   *	    pop    esi
 00000033  5B		   *	    pop    ebx
 00000034  58		   *	    pop    eax
 00000035  C9		   *	    leave  
 00000036  C3		   *	    ret    00000h
 00000037			SumThreeArrays ENDP

				END

Microsoft (R) Macro Assembler Version 14.00.23026.0	    11/05/15 19:37:01
sumarrays.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000037 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

SumThreeArrays . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000037 Public C
  array1 . . . . . . . . . . . .	DWord	 bp + 00000008
  array2 . . . . . . . . . . . .	DWord	 bp + 0000000C
  array3 . . . . . . . . . . . .	DWord	 bp + 00000010
  arraySize  . . . . . . . . . .	DWord	 bp + 00000014
  sz . . . . . . . . . . . . . .	Byte	 bp - 00000001
  L1 . . . . . . . . . . . . . .	L Near	 00000010 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000001h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT

	   0 Warnings
	   0 Errors
